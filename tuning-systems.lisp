(in-package :key-names)

(defun simplify (interval &key (identity-interval 2/1))
  (cond ((< interval 1/1) (simplify (* interval identity-interval)
                                    :identity-interval identity-interval))
        ((>= interval identity-interval) (simplify (/ interval identity-interval)
                                                   :identity-interval identity-interval))
        (t interval)))

(defun linear-system (index &key (generator-interval 3/2) (identity-interval 2/1))
  (simplify (expt generator-interval index) :identity-interval identity-interval))

(defun temper (interval amount &key (reference-interval 81/80))
  (* interval (expt reference-interval amount)))

(defmacro meantone (fraction)
  `(lambda (index)
     (linear-system index :generator-interval (temper 3/2 ,fraction))))

(defun tune (tuning-fun index)
  (funcall tuning-fun index))

(defparameter *keymaps*
  '((:wolf-Ė-Ḃ♮ ((:Ė  . 23)
                 (:Ȧ  . 22)
                 (:Ḋ  . 21)
                 (:Ġ  . 20)
                 (:Ċ  . 19)
                 (:Ḟ  . 18)
                 (:Ḃ♭ . 17)
                 (:Ė♭ . 16)
                 (:Ȧ♭ . 15)
                 (:Ḋ♭ . 14)
                 (:Ġ♭ . 13)
                 (:B♯ . 12)
                 (:E♯ . 11)
                 (:A♯ . 10)
                 (:D♯ . 9)
                 (:G♯ . 8)
                 (:C♯ . 7)
                 (:F♯ . 6)
                 (:B♮ . 5)
                 (:E  . 4)
                 (:A  . 3)
                 (:D  . 2)
                 (:G  . 1)
                 (:C  . 0)
                 (:F  . -1)
                 (:B♭ . -2)
                 (:E♭ . -3)
                 (:A♭ . -4)
                 (:D♭ . -5)
                 (:G♭ . -6)
                 (:Ḃ♮ . -7)))))

(defun get-keymap (name)
  (cadr (assoc name *keymaps*)))

(defun get-fifth-index (keymap notename)
  (cdr (assoc notename keymap)))

(defun get-pitch (tuning-fun keymap-name notename)
  (tune tuning-fun (get-fifth-index (get-keymap keymap-name) notename)))

(defun pitch-fun (tuning-fun keymap-name)
  (lambda (notename) (tune tuning-fun (get-fifth-index (get-keymap keymap-name) notename))))

(defparameter *tuning-1* (pitch-fun (meantone -1/4) :wolf-Ė-Ḃ♮))
(defparameter *tuning-2* (pitch-fun (meantone -1/3) :wolf-Ė-Ḃ♮))

(defun calculate-interval-size (departure-name destination-name direction pitch-fun)
  (let ((departure-interval (funcall pitch-fun departure-name))
        (destination-interval (funcall pitch-fun destination-name)))
    (cond ((> destination-interval departure-interval)
           (if (eq direction :up)
               (simplify (/ destination-interval departure-interval))
               (simplify (/ departure-interval destination-interval))))
          ((< destination-interval departure-interval)
           (if (eq direction :down)
               (simplify (/ departure-interval destination-interval))
               (simplify (/ destination-interval departure-interval))))
          (t 1/1))))



(defun ratio->length (ratio &key (unit-interval (expt 2 1/1200)))
  (/ (log ratio) (log unit-interval)))
